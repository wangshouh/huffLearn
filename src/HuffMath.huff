#define function addNumbers(uint256,uint256) nonpayable returns (uint256)
#define function safeAdd(uint256,uint256) nonpayable returns (uint256)
#define function safeMulti(uint256,uint256) nonpayable returns (uint256)
#define function popCount(uint256) nonpayable returns (uint256)


#define macro NON_SAFE_ADD() = takes (0) returns (0) {
	0x04 calldataload	// [num1]
	0x24 calldataload	// [num2, num1]
	add 				// [result]
	0x00 mstore
	0x20 0x00 return
}

#define macro SAFE_ADD() = takes (0) returns (0) {
	0x04 calldataload	// [num1]
	0x24 calldataload	// [num2, num1]
	dup2				// [num1, num2, num1]
	add					// [result, num1]
	dup1				// [result, result, num1]
	swap2				// [num1, result, result]
	gt					// [is_overflow, result]
	over_flow jumpi
	0x00 mstore
	0x20 0x00 return

	over_flow:
		0x00 0x00 revert
}

#define macro SAFE_MULTI() = takes(0) returns (0) {
	0x04 calldataload	// [x]
	0x24 calldataload	// [y, x]
	mul 				// [z]
	0x24 calldataload	// [y, z]
	0x04 calldataload	// [x, y, z]
	dup2				// [y, x, y, z]
	dup4 				// [z, y, x, y, z]
	div					// [z / y, x, y, z]
	eq iszero			// [z / y != x, y, z]
	swap1				// [y, z / y != x, z]
	iszero iszero		// [y != 0, z / y != x, z]
	and 				// [is_overflow, z]
	over_flow jumpi
	0x00 mstore
	0x20 0x00 return

	over_flow:
		0x00 0x00 revert
}

#define macro POP_COUNT() = takes (1) returns (1) {
	dup1				// [x, x]
	0x01 shr			// [x >> 1, x]
	0x5555555555555555555555555555555555555555555555555555555555555555
	and swap1			// [x, (x >> 1) & 0x5]
	sub
	dup1				// [x, x]
	0x3333333333333333333333333333333333333333333333333333333333333333
	and 				// [x & 3, x]
	swap1 0x02 shr		// [x >> 2, x & 3]
	0x3333333333333333333333333333333333333333333333333333333333333333
	and add 			// [x]
	dup1				// [x, x]
	0x04 shr			// [x >> 4, x]
	add 				// [x + x >> 4]
	0x0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F
	and 				// [x]
	dup1				// [x, x]
	0x08 shr			// [x >> 0x08, x]
	add 				// [x + (x >> 0x08)]
	dup1 0x10 shr add
	dup1 0x20 shr add
	dup1 0x40 shr add
	dup1 0x80 shr add
	0x1ff and
}


#define macro POP_COUNT_WRAPPER() = takes (0) returns (0) {
	0x04 calldataload	// [x]		
	POP_COUNT()
	0x00 mstore
	0x20 0x00 return
}

#define macro MAIN() = takes (0) returns (0) {
	0x00 calldataload 0xE0 shr

	dup1 __FUNC_SIG(addNumbers) eq addNumbers jumpi
	dup1 __FUNC_SIG(safeAdd)	eq safeAdd jumpi
	dup1 __FUNC_SIG(safeMulti)	eq safeMulti jumpi
	dup1 __FUNC_SIG(popCount)	eq popCount jumpi

	addNumbers:
		NON_SAFE_ADD()
	safeAdd:
		SAFE_ADD()
	safeMulti:
		SAFE_MULTI()
	popCount:
		POP_COUNT_WRAPPER()
}