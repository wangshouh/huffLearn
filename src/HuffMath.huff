#define function addNumbers(uint256,uint256) nonpayable returns (uint256)
#define function safeAdd(uint256,uint256) nonpayable returns (uint256)
#define function safeMulti(uint256,uint256) nonpayable returns (uint256)
#define function popCount(uint256) nonpayable returns (uint256)
#define function nlzCount(uint256) nonpayable returns (uint256)
#define function ilog2(uint256) nonpayable returns (uint256)
#define function sqrt(uint256) nonpayable returns (uint256)
#define function sum(uint256[]) nonpayable returns (uint256)


#define macro NON_SAFE_ADD() = takes (0) returns (0) {
	0x04 calldataload	// [num1]
	0x24 calldataload	// [num2, num1]
	add 				// [result]
	0x00 mstore
	0x20 0x00 return
}

#define macro SAFE_ADD() = takes (0) returns (0) {
	0x04 calldataload	// [num1]
	0x24 calldataload	// [num2, num1]
	dup2				// [num1, num2, num1]
	add					// [result, num1]
	dup1				// [result, result, num1]
	swap2				// [num1, result, result]
	gt					// [is_overflow, result]
	over_flow jumpi
	0x00 mstore
	0x20 0x00 return

	over_flow:
		0x00 0x00 revert
}

#define macro SAFE_MULTI() = takes(0) returns (0) {
	0x04 calldataload	// [x]
	0x24 calldataload	// [y, x]
	mul 				// [z]
	0x24 calldataload	// [y, z]
	0x04 calldataload	// [x, y, z]
	dup2				// [y, x, y, z]
	dup4 				// [z, y, x, y, z]
	div					// [z / y, x, y, z]
	eq iszero			// [z / y != x, y, z]
	swap1				// [y, z / y != x, z]
	iszero iszero		// [y != 0, z / y != x, z]
	and 				// [is_overflow, z]
	over_flow jumpi
	0x00 mstore
	0x20 0x00 return

	over_flow:
		0x00 0x00 revert
}

#define macro POP_COUNT() = takes (1) returns (1) {
	dup1				// [x, x]
	0x01 shr			// [x >> 1, x]
	0x5555555555555555555555555555555555555555555555555555555555555555
	and swap1			// [x, (x >> 1) & 0x5]
	sub
	dup1				// [x, x]
	0x3333333333333333333333333333333333333333333333333333333333333333
	and 				// [x & 3, x]
	swap1 0x02 shr		// [x >> 2, x & 3]
	0x3333333333333333333333333333333333333333333333333333333333333333
	and add 			// [x]
	dup1				// [x, x]
	0x04 shr			// [x >> 4, x]
	add 				// [x + x >> 4]
	0x0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F
	and 				// [x]
	dup1				// [x, x]
	0x08 shr			// [x >> 0x08, x]
	add 				// [x + (x >> 0x08)]
	0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF
	and
	dup1 0x10 shr add
	dup1 0x20 shr add
	dup1 0x40 shr add
	dup1 0x80 shr add
	0x1ff and
}

#define macro NLZ_COUNT() = takes(1) returns (1) {

	0x1 				// [n, x]
	swap1				// [x, n]

	dup1				// [x, x, n]
	0x80 shr			// [x >> 128, x, n]
	iszero iszero		// [x >> 128 != 0, x, n]
	not_zero_128 jumpi	// [x, n]
	0x80 shl			// [x << 128, n]
	swap1 0x80 add 		// [n + 128, x << 128]
	swap1				// [x, n]

	not_zero_128:	

	dup1				// [x, x, n]
	0xc0 shr			// [x >> 192, x, n]
	iszero iszero		// [x >> 192 != 0, x, n]
	not_zero_192 jumpi	// [x, n]
	0x40 shl			// [x << 64, n]
	swap1 0x40 add 		// [n + 64, x << 64]
	swap1				// [x, n]

	not_zero_192:

	dup1				// [x, x, n]
	0xe0 shr			// [x >> 224, x, n]
	iszero iszero		// [x >> 224 != 0, x, n]
	not_zero_224 jumpi	// [x, n]
	0x20 shl			// [x << 32, n]
	swap1 0x20 add 		// [n + 32, x << 32]
	swap1				// [x, n]

	not_zero_224:	

	dup1				// [x, x, n]
	0xf0 shr			// [x >> 240, x, n]
	iszero iszero		// [x >> 240 != 0, x, n]
	not_zero_240 jumpi	// [x, n]
	0x10 shl			// [x << 16, n]
	swap1 0x10 add 		// [n + 16, x << 16]
	swap1				// [x, n]

	not_zero_240:

	dup1				// [x, x, n]
	0xf8 shr			// [x >> 248, x, n]
	iszero iszero		// [x >> 248 != 0, x, n]
	not_zero_248 jumpi	// [x, n]
	0x08 shl			// [x << 8, n]
	swap1 0x08 add 		// [n + 8, x << 8]
	swap1				// [x, n]

	not_zero_248:	

	dup1				// [x, x, n]
	0xfc shr			// [x >> 252, x, n]
	iszero iszero		// [x >> 252 != 0, x, n]
	not_zero_252 jumpi	// [x, n]
	0x04 shl			// [x << 4, n]
	swap1 0x04 add 		// [n + 4, x << 4]
	swap1				// [x, n]

	not_zero_252:		

	dup1				// [x, x, n]
	0xfe shr			// [x >> 254, x, n]
	iszero iszero		// [x >> 254 != 0, x, n]
	not_zero_254 jumpi	// [x, n]
	0x02 shl			// [x << 2, n]
	swap1 0x02 add 		// [n + 2, x << 2]
	swap1				// [x, n]

	not_zero_254:
	0xff shr			// [x >> 255, n]
	swap1 sub			
}

#define macro ILOG2() = takes (1) returns (1) {
	NLZ_COUNT()			// [nlz(x)]
	0xff sub
}

#define macro SQRT() = takes (0) returns (0) {
	0x04 calldataload	// [x]
	dup1				// [x, x]
	iszero				// [x == 0, x]
	is_zero jumpi
	dup1				// [x, x]
	0x01				// [1, x, x]
	dup2				// [x, 1, x, x]
	ILOG2()				// [log2(x), 1, x, x]
	0x01 shr			// [log2(x) / 2, 1, x, x]
	shl					// [result, x, x]

	dup1				// [result, result, x, x]
	swap2 div			// [x / result, result, x]
	add 				// [x / result + result, x]
	0x01 shr			// [result, x]

	dup1				// [result, result, x]
	dup3				// [x, result, result, x]
	div add 0x01 shr	// [result, x]		

	dup1				// [result, result, x]
	dup3				// [x, result, result, x]
	div add 0x01 shr	// [result, x]		

	dup1				// [result, result, x]
	dup3				// [x, result, result, x]
	div add 0x01 shr	// [result, x]		

	dup1				// [result, result, x]
	dup3				// [x, result, result, x]
	div add 0x01 shr	// [result, x]		

	dup1				// [result, result, x]
	dup3				// [x, result, result, x]
	div add 0x01 shr	// [result, x]		

	dup1				// [result, result, x]
	dup3				// [x, result, result, x]
	div add 0x01 shr	// [result, x]

	dup2 dup2			// [result, x, result, x] 			
	gt 					// [result > x, result, x]
	min_pop jumpi		// [result, x]
	swap1				// [x, result]

	min_pop:
	pop

	is_zero:

	0x00 mstore
	0x20 0x00 return	
}

#define macro POP_COUNT_WRAPPER() = takes (0) returns (0) {
	0x04 calldataload	// [x]		
	POP_COUNT()
	0x00 mstore
	0x20 0x00 return
}

#define macro NLZ_COUNT_WRAPPER() = takes (0) returns (0) {
	0x04 calldataload	// [x]
	NLZ_COUNT()
	0x00 mstore
	0x20 0x00 return
}

#define macro ILOG2_WRAPPER() = takes (0) returns (0) {
	0x04 calldataload	// [x]
	ILOG2()
	0x00 mstore
	0x20 0x00 return	
}

#define macro SUM() = takes(0) returns (0) {
	0x24 calldataload	// [length]

	0x01				// [readed, length] fix readed

	0x00 				// [sum, readed, length] 
	0x64 swap1			// [sum, next, readed, length] fix next
	0x44				// [now, sum, next, readed, length]

	calldataload		// [element, sum, next, readed, length]

	add 				// [sum, next, readed, length] add sum
	dup4 dup4			// [readed, length, sum, next, readed, length]
	lt 					// [readed < length, sum, next, readed, length]
	iszero
	array_end jumpi		// [sum, now, readed, length]

	array_for:			// [sum, now, readed, length]

	dup2 calldataload	// [element, sum, now, readed, length]
	add 				// [sum, now, readed, length] add sum

	swap1 0x20 add		// [next, sum, readed, length] fix next
	swap2 0x01 add 		// [readed, sum, next, length] fix readed

	swap1				// [sum, readed, next, length]
	dup4 dup3 lt 		// [readed < length, sum, readed, next, length]
	iszero
	array_end jumpi		// [sum, readed, now, length]


	dup3 calldataload	// [element, sum, readed, now, length]
	add 				// [sum, readed, now, length] 	add sum
	swap2 0x20 add 		// [next, readed, sum, length]	fix next
	swap1 0x01 add 		// [readed, next, sum, length]	fix readed
	swap2				// [sum, next, readed, length]

	dup4 dup4			// [readed, length, sum, next, readed, length]
	lt 					// [readed < length, sum, next, readed, length]
	iszero
	array_end jumpi		// [sum, now, readed, length]

	array_for jump

	array_end:
	0x00 mstore
	0x20 0x00 return
}


#define macro MAIN() = takes (0) returns (0) {
	0x00 calldataload 0xE0 shr

	dup1 __FUNC_SIG(addNumbers) eq addNumbers jumpi
	dup1 __FUNC_SIG(safeAdd)	eq safeAdd jumpi
	dup1 __FUNC_SIG(safeMulti)	eq safeMulti jumpi
	dup1 __FUNC_SIG(popCount)	eq popCount jumpi
	dup1 __FUNC_SIG(nlzCount)	eq nlzCount jumpi
	dup1 __FUNC_SIG(ilog2)		eq ilog2 jumpi
	dup1 __FUNC_SIG(sqrt) 		eq sqrt jumpi 
	dup1 __FUNC_SIG(sum) eq sum jumpi

	addNumbers:
		NON_SAFE_ADD()
	safeAdd:
		SAFE_ADD()
	safeMulti:
		SAFE_MULTI()
	popCount:
		POP_COUNT_WRAPPER()
	nlzCount:
		NLZ_COUNT_WRAPPER()
	ilog2:
		ILOG2_WRAPPER()
	sqrt:
		SQRT()
	sum:
		SUM()
}